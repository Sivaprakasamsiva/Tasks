import jakarta.mail.*;
import jakarta.mail.internet.*;
import javax.activation.*;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.File;
import java.util.Properties;
import com.itextpdf.kernel.colors.ColorConstants;
import com.itextpdf.kernel.pdf.*;
import com.itextpdf.layout.Document;
import com.itextpdf.layout.element.Paragraph;

public class EmailPDFGuiApp {

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> createAndShowGUI());
    }

    private static void createAndShowGUI() {
        JFrame frame = new JFrame("PDF Email Sender");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(400, 500);
        frame.setLayout(new GridLayout(0, 1, 10, 10));

        JTextField senderField = new JTextField();
        JPasswordField passwordField = new JPasswordField();
        JTextField receiverField = new JTextField();
        JTextField filenameField = new JTextField("output.pdf");

        JTextArea paragraphArea = new JTextArea(5, 20);
        JScrollPane scrollPane = new JScrollPane(paragraphArea);

        String[] colors = {"Red", "Green", "Blue", "Black"};
        JComboBox<String> colorBox = new JComboBox<>(colors);

        JButton sendButton = new JButton("Generate PDF and Send Email");

        // Labels
        frame.add(new JLabel("Sender Gmail:"));
        frame.add(senderField);
        frame.add(new JLabel("App Password:"));
        frame.add(passwordField);
        frame.add(new JLabel("Receiver Gmail:"));
        frame.add(receiverField);
        frame.add(new JLabel("PDF Filename:"));
        frame.add(filenameField);
        frame.add(new JLabel("Paragraph Text:"));
        frame.add(scrollPane);
        frame.add(new JLabel("Font Color:"));
        frame.add(colorBox);
        frame.add(sendButton);

        sendButton.addActionListener(e -> {
            String sender = normalizeEmail(senderField.getText().trim());
            String password = new String(passwordField.getPassword());
            String receiver = normalizeEmail(receiverField.getText().trim());
            String filename = filenameField.getText().trim();
            String paragraph = paragraphArea.getText().trim();
            String colorName = ((String) colorBox.getSelectedItem()).toLowerCase();

            if (sender == null || receiver == null || password.isEmpty() || paragraph.isEmpty() || filename.isEmpty()) {
                JOptionPane.showMessageDialog(frame, "All fields are required.", "Input Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (!filename.endsWith(".pdf")) filename += ".pdf";
            String filePath = System.getProperty("user.dir") + File.separator + filename;

            try {
                // Create PDF
                PdfWriter writer = new PdfWriter(filePath);
                PdfDocument pdf = new PdfDocument(writer);
                Document document = new Document(pdf);
                Paragraph para = new Paragraph(paragraph).setFontSize(16).setFontColor(getColor(colorName));
                document.add(para);
                document.close();

                // Send Email
                boolean sent = sendEmailWithAttachment(sender, receiver, password, filePath);
                if (sent) {
                    JOptionPane.showMessageDialog(frame, "✅ Email sent successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(frame, "❌ Email failed. Check Gmail/App password.", "Send Failed", JOptionPane.ERROR_MESSAGE);
                }
            } catch (Exception ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(frame, "❌ Error: " + ex.getMessage(), "Exception", JOptionPane.ERROR_MESSAGE);
            }
        });

        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
    }

    private static String normalizeEmail(String input) {
        if (input.isEmpty()) return null;
        if (!input.contains("@")) input += "@gmail.com";
        if (!input.matches("^[a-zA-Z0-9._%+-]+@gmail\\.com$")) return null;
        return input;
    }

    private static com.itextpdf.kernel.colors.Color getColor(String colorName) {
        switch (colorName.toLowerCase()) {
            case "red": return ColorConstants.RED;
            case "green": return ColorConstants.GREEN;
            case "blue": return ColorConstants.BLUE;
            case "black": return ColorConstants.BLACK;
            default: return ColorConstants.BLACK;
        }
    }

    private static boolean sendEmailWithAttachment(String from, String to, String password, String filePath) {
        Properties props = new Properties();
        props.put("mail.smtp.auth", "true");
        props.put("mail.smtp.starttls.enable", "true");
        props.put("mail.smtp.host", "smtp.gmail.com");
        props.put("mail.smtp.port", "587");

        Session session = Session.getInstance(props, new Authenticator() {
            protected PasswordAuthentication getPasswordAuthentication() {
                return new PasswordAuthentication(from, password);
            }
        });

        try {
            Message message = new MimeMessage(session);
            message.setFrom(new InternetAddress(from));
            message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(to));
            message.setSubject("Your PDF Attachment");

            BodyPart messageBodyPart = new MimeBodyPart();
            messageBodyPart.setText("Please find your generated PDF attached.");

            MimeBodyPart attachmentPart = new MimeBodyPart();
            attachmentPart.attachFile(new File(filePath));

            Multipart multipart = new MimeMultipart();
            multipart.addBodyPart(messageBodyPart);
            multipart.addBodyPart(attachmentPart);
            message.setContent(multipart);

            Transport.send(message);
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }
}
